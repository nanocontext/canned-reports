AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Roles must be created by VAEC, for testing that the needed roles are created correctly the roles may be
  created by CloudFormation using this template.

Parameters:
  stage:
    Description: Name of the APIs stage, note that this is also the "environment"
    Type: String
Resources:
  # ========================================================================================================
  # Users, roles and policies
  # ========================================================================================================
  FunctionLoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "project-ocr-cr-logging-${stage}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  # The presence of s3:ListBucket changes the behavior of the headObject operation.
  # With the s3:ListBucket permission the headObject operation will return a 404(not found) when the given key does not exist.
  # Without the s3:ListBucket permission the headObject operation will return a 403(forbidden) when the given key does not exist,
  # which may make sense from a strict security perspective but it makes it impossible to tell if a key exists or not.
  FunctionS3BucketAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "project-ocr-cr-bucket-source-function-${stage}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource: "*"
  SourceS3BucketAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "project-ocr-cr-bucket-${stage}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
              - s3:CreateBucket
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:GetObjectTagging
              - s3:GetObjectVersionTagging
            Resource: arn:aws:s3:::*

  StatusFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "project-ocr-cr-role-status-function-${stage}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
        - !Ref FunctionLoggingPolicy
        - !Ref SourceS3BucketAccessPolicy
  # ========================================================================================================
  # Outputs must include any identifiers which are needed for Application resources.
  # Typically the values output here are passed to the Application resource template
  # through the samconfig.toml file.
  # ========================================================================================================
Outputs:
  StatusFunctionRole:
    Description: "The role for canned report Lambda function"
    Value: !Ref StatusFunctionRole
